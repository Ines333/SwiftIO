{"Functions.html#/s:7SwiftIO4wait2usySi_tF":{"name":"wait(us:)","abstract":"<p>When you invoke the wait function, the CPU keeps on working and checking if the time set (in microsecondï¼‰is up. In addition, this function is more accurate than the sleep function.</p>"},"Functions.html#/s:7SwiftIO5sleep2msySi_tF":{"name":"sleep(ms:)","abstract":"<p>The sleep function will suspend the processor&rsquo;s work in a given time period (in millisecond).</p>"},"Functions.html#/s:7SwiftIO22getPowerUpMillisecondss5Int64VyF":{"name":"getPowerUpMilliseconds()","abstract":"<p>Get the elapsed time in millisecond since the board powered up.</p>"},"Functions.html#/s:7SwiftIO13getClockCycleSuyF":{"name":"getClockCycle()","abstract":"<p>Get the clock cycle time of the processor.</p>"},"Functions.html#/s:7SwiftIO15calcNanosecondsyS2uF":{"name":"calcNanoseconds(_:)","abstract":"<p>Convert the clock cycle into nanosecond. This function is usually used together with getClockCycle.</p>"},"Classes/UART/BufferLength.html#/s:7SwiftIO4UARTC12BufferLengthO5smallyA2EmF":{"name":"small","abstract":"<p>Undocumented</p>","parent_name":"BufferLength"},"Classes/UART/BufferLength.html#/s:7SwiftIO4UARTC12BufferLengthO6mediumyA2EmF":{"name":"medium","abstract":"<p>Undocumented</p>","parent_name":"BufferLength"},"Classes/UART/BufferLength.html#/s:7SwiftIO4UARTC12BufferLengthO5largeyA2EmF":{"name":"large","abstract":"<p>Undocumented</p>","parent_name":"BufferLength"},"Classes/UART/DataBits.html#/s:7SwiftIO4UARTC8DataBitsO05eightE0yA2EmF":{"name":"eightBits","abstract":"<p>Undocumented</p>","parent_name":"DataBits"},"Classes/UART/StopBits.html#/s:7SwiftIO4UARTC8StopBitsO6oneBityA2EmF":{"name":"oneBit","abstract":"<p>Undocumented</p>","parent_name":"StopBits"},"Classes/UART/StopBits.html#/s:7SwiftIO4UARTC8StopBitsO03twoE0yA2EmF":{"name":"twoBits","abstract":"<p>Undocumented</p>","parent_name":"StopBits"},"Classes/UART/Parity.html#/s:7SwiftIO4UARTC6ParityO4noneyA2EmF":{"name":"none","abstract":"<p>Undocumented</p>","parent_name":"Parity"},"Classes/UART/Parity.html#/s:7SwiftIO4UARTC6ParityO3oddyA2EmF":{"name":"odd","abstract":"<p>Undocumented</p>","parent_name":"Parity"},"Classes/UART/Parity.html#/s:7SwiftIO4UARTC6ParityO4evenyA2EmF":{"name":"even","abstract":"<p>Undocumented</p>","parent_name":"Parity"},"Classes/UART/Id.html#/s:7SwiftIO4UARTC2IdO5UART0yA2EmF":{"name":"UART0","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/UART/Id.html#/s:7SwiftIO4UARTC2IdO5UART1yA2EmF":{"name":"UART1","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/UART/Id.html#/s:7SwiftIO4UARTC2IdO5UART2yA2EmF":{"name":"UART2","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/UART/Id.html#/s:7SwiftIO4UARTC2IdO5UART3yA2EmF":{"name":"UART3","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/UART.html#/s:7SwiftIO4UARTC_8baudRate8dataBits6parity04stopG013readBufLengthA2C2IdO_SiAC04DataG0OAC6ParityOAC04StopG0OAC06BufferL0Otcfc":{"name":"init(_:baudRate:dataBits:parity:stopBits:readBufLength:)","abstract":"<p>Initialize an interface for UART communication.</p>","parent_name":"UART"},"Classes/UART.html#/s:7SwiftIO4UARTC11setBaudrateyySiF":{"name":"setBaudrate(_:)","abstract":"<p>Set the baud rate for communication. It should be set ahead of time to ensure the same baud rate between two devices.</p>","parent_name":"UART"},"Classes/UART.html#/s:7SwiftIO4UARTC11clearBufferyyF":{"name":"clearBuffer()","abstract":"<p>Clear all bytes from the buffer to store the incoming data.</p>","parent_name":"UART"},"Classes/UART.html#/s:7SwiftIO4UARTC19checkBufferReceivedSiyF":{"name":"checkBufferReceived()","abstract":"<p>Return the number of received data from the serial buffer.</p>","parent_name":"UART"},"Classes/UART.html#/s:7SwiftIO4UARTC5writeyys5UInt8VF":{"name":"write(_:)","abstract":"<p>Write a byte of data to the external device through the serial connection.</p>","parent_name":"UART"},"Classes/UART.html#/s:7SwiftIO4UARTC5writeyySays5UInt8VGF":{"name":"write(_:)","abstract":"<p>Write a series of bytes to the external device through the serial connection.</p>","parent_name":"UART"},"Classes/UART.html#/s:7SwiftIO4UARTC5writeyySSF":{"name":"write(_:)","abstract":"<p>Write a string to the external device through the serial connection.</p>","parent_name":"UART"},"Classes/UART.html#/s:7SwiftIO4UARTC8readBytes5UInt8VyF":{"name":"readByte()","abstract":"<p>Read a byte of data receiving from the external device.</p>","parent_name":"UART"},"Classes/UART.html#/s:7SwiftIO4UARTC4readySays5UInt8VGSiF":{"name":"read(_:)","abstract":"<p>Read a series of bytes receiving from the external device.</p>","parent_name":"UART"},"Classes/UART/Id.html":{"name":"Id","abstract":"<p>The interfaces UART0 to UART3 are used for UART communication. Two pins are necessary: TX is used to transmit data; RX is used to receive data.</p>","parent_name":"UART"},"Classes/UART/Parity.html":{"name":"Parity","abstract":"<p>The parity bit is used to ensure the data transmission according to the number of logical-high bits.</p>","parent_name":"UART"},"Classes/UART/StopBits.html":{"name":"StopBits","abstract":"<p>One or two stops bits are reserved to end the communication.</p>","parent_name":"UART"},"Classes/UART/DataBits.html":{"name":"DataBits","abstract":"<p>This indicates the length of the data being transmitted.</p>","parent_name":"UART"},"Classes/UART/BufferLength.html":{"name":"BufferLength","abstract":"<p>This indicates the storage size of the serial buffer.</p>","parent_name":"UART"},"Classes/Timer/Mode.html#/s:7SwiftIO5TimerC4ModeO7oneShotyA2EmF":{"name":"oneShot","abstract":"<p>Undocumented</p>","parent_name":"Mode"},"Classes/Timer/Mode.html#/s:7SwiftIO5TimerC4ModeO6periodyA2EmF":{"name":"period","abstract":"<p>Undocumented</p>","parent_name":"Mode"},"Classes/Timer.html#/s:7SwiftIO5TimerCACycfc":{"name":"init()","abstract":"<p>Intialize a timer.</p>","parent_name":"Timer"},"Classes/Timer.html#/s:7SwiftIO5TimerC12setInterrupt2ms4mode5start_ySi_AC4ModeOSbyyctF":{"name":"setInterrupt(ms:mode:start:_:)","abstract":"<p>Execute a designated task  at a scheduled time interval. The task should be executed in a very short time, usually in nanoseconds.</p>","parent_name":"Timer"},"Classes/Timer.html#/s:7SwiftIO5TimerC5startyyF":{"name":"start()","abstract":"<p>Start the timer.</p>","parent_name":"Timer"},"Classes/Timer.html#/s:7SwiftIO5TimerC4stopyyF":{"name":"stop()","abstract":"<p>Stop the timer.</p>","parent_name":"Timer"},"Classes/Timer.html#/s:7SwiftIO5TimerC5resetyyF":{"name":"reset()","abstract":"<p>Reset the timer. The timer will restart from 0.</p>","parent_name":"Timer"},"Classes/Timer/Mode.html":{"name":"Mode","abstract":"<p>There are two timer modes: if set to <code>oneShot</code>, the interrupt happens only once; if set to <code>period</code>, the interrupt happens continuously.</p>","parent_name":"Timer"},"Classes/SPI/Id.html#/s:7SwiftIO3SPIC2IdO4SPI0yA2EmF":{"name":"SPI0","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/SPI/Id.html#/s:7SwiftIO3SPIC2IdO4SPI1yA2EmF":{"name":"SPI1","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/SPI.html#/s:7SwiftIO3SPIC_5speedA2C2IdO_Sitcfc":{"name":"init(_:speed:)","abstract":"<p>Initialize a specified interface for SPI communication as a master device.</p>","parent_name":"SPI"},"Classes/SPI.html#/s:7SwiftIO3SPIC8getSpeedSiyF":{"name":"getSpeed()","abstract":"<p>Get the current clock speed of SPI communication.</p>","parent_name":"SPI"},"Classes/SPI.html#/s:7SwiftIO3SPIC8setSpeedyySiF":{"name":"setSpeed(_:)","abstract":"<p>Set the speed of SPI communication.</p>","parent_name":"SPI"},"Classes/SPI.html#/s:7SwiftIO3SPIC8readBytes5UInt8VyF":{"name":"readByte()","abstract":"<p>Read a byte of data from the slave device.</p>","parent_name":"SPI"},"Classes/SPI.html#/s:7SwiftIO3SPIC4read5countSays5UInt8VGSi_tF":{"name":"read(count:)","abstract":"<p>Read an array of data from the slave device.</p>","parent_name":"SPI"},"Classes/SPI.html#/s:7SwiftIO3SPIC5writeyys5UInt8VF":{"name":"write(_:)","abstract":"<p>Write a byte of data to the slave device.</p>","parent_name":"SPI"},"Classes/SPI.html#/s:7SwiftIO3SPIC5writeyySays5UInt8VGF":{"name":"write(_:)","abstract":"<p>Write an array of data to the slave device.</p>","parent_name":"SPI"},"Classes/SPI/Id.html":{"name":"Id","abstract":"<p>SPI0 and SPI1 are designed for SPI communication. Four wires are required: SCK (serial clock), SDO (data sending), SDI (data receiving), CS (slave selection).</p>","parent_name":"SPI"},"Classes/PWMOut/Id.html#/s:7SwiftIO6PWMOutC2IdO4PWM0yA2EmF":{"name":"PWM0","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/PWMOut/Id.html#/s:7SwiftIO6PWMOutC2IdO4PWM1yA2EmF":{"name":"PWM1","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/PWMOut/Id.html#/s:7SwiftIO6PWMOutC2IdO4PWM2yA2EmF":{"name":"PWM2","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/PWMOut/Id.html#/s:7SwiftIO6PWMOutC2IdO4PWM3yA2EmF":{"name":"PWM3","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/PWMOut/Id.html#/s:7SwiftIO6PWMOutC2IdO4PWM4yA2EmF":{"name":"PWM4","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/PWMOut/Id.html#/s:7SwiftIO6PWMOutC2IdO4PWM5yA2EmF":{"name":"PWM5","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/PWMOut/Id.html#/s:7SwiftIO6PWMOutC2IdO4PWM6yA2EmF":{"name":"PWM6","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/PWMOut/Id.html#/s:7SwiftIO6PWMOutC2IdO4PWM7yA2EmF":{"name":"PWM7","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/PWMOut/Id.html#/s:7SwiftIO6PWMOutC2IdO4PWM8yA2EmF":{"name":"PWM8","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/PWMOut/Id.html#/s:7SwiftIO6PWMOutC2IdO4PWM9yA2EmF":{"name":"PWM9","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/PWMOut/Id.html#/s:7SwiftIO6PWMOutC2IdO5PWM10yA2EmF":{"name":"PWM10","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/PWMOut/Id.html#/s:7SwiftIO6PWMOutC2IdO5PWM11yA2EmF":{"name":"PWM11","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/PWMOut/Id.html#/s:7SwiftIO6PWMOutC2IdO5PWM12yA2EmF":{"name":"PWM12","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/PWMOut/Id.html#/s:7SwiftIO6PWMOutC2IdO5PWM13yA2EmF":{"name":"PWM13","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/PWMOut.html#/s:7SwiftIO6PWMOutC_9frequency9dutycycleA2C2IdO_SiSftcfc":{"name":"init(_:frequency:dutycycle:)","abstract":"<p>Initialize a PWM output on a specified pin.</p>","parent_name":"PWMOut"},"Classes/PWMOut.html#/s:7SwiftIO6PWMOutC3set9frequency9dutycycleySi_SftF":{"name":"set(frequency:dutycycle:)","abstract":"<p>Set the frequency and the duty cycle of a PWM output signal. The value of the duty cycle should be a float between 0.0 and 1.0.</p>","parent_name":"PWMOut"},"Classes/PWMOut.html#/s:7SwiftIO6PWMOutC3set6period5pulseySi_SitF":{"name":"set(period:pulse:)","abstract":"<p>Set the period and pulse width of a PWM output signal.</p>","parent_name":"PWMOut"},"Classes/PWMOut.html#/s:7SwiftIO6PWMOutC12setDutycycleyySfF":{"name":"setDutycycle(_:)","abstract":"<p>Set the duty cycle of a PWM output signal, that&rsquo;s to say, set the duration of the on-state of a signal. The value should be a float between 0.0 and 1.0.</p>","parent_name":"PWMOut"},"Classes/PWMOut/Id.html":{"name":"Id","abstract":"<p>The PWMOut pins are PMW0 to PMW13 marked with a tilde on the board.</p>","parent_name":"PWMOut"},"Classes/I2C/Speed.html#/s:7SwiftIO3I2CC5SpeedO8standardyA2EmF":{"name":"standard","abstract":"<p>Undocumented</p>","parent_name":"Speed"},"Classes/I2C/Speed.html#/s:7SwiftIO3I2CC5SpeedO4fastyA2EmF":{"name":"fast","abstract":"<p>Undocumented</p>","parent_name":"Speed"},"Classes/I2C/Speed.html#/s:7SwiftIO3I2CC5SpeedO8fastPlusyA2EmF":{"name":"fastPlus","abstract":"<p>Undocumented</p>","parent_name":"Speed"},"Classes/I2C/Id.html#/s:7SwiftIO3I2CC2IdO0C2C0yA2EmF":{"name":"I2C0","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/I2C/Id.html#/s:7SwiftIO3I2CC2IdO0C2C1yA2EmF":{"name":"I2C1","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/I2C.html#/s:7SwiftIO3I2CC_5speedA2C2IdO_AC5SpeedOtcfc":{"name":"init(_:speed:)","abstract":"<p>Initialize a specific I2C interface as a master device.</p>","parent_name":"I2C"},"Classes/I2C.html#/s:7SwiftIO3I2CC8getSpeedAC0E0OyF":{"name":"getSpeed()","abstract":"<p>Get the current clock speed of the data transmission.</p>","parent_name":"I2C"},"Classes/I2C.html#/s:7SwiftIO3I2CC8setSpeedyyAC0E0OF":{"name":"setSpeed(_:)","abstract":"<p>Set the clock speed to change the transmission rate.</p>","parent_name":"I2C"},"Classes/I2C.html#/s:7SwiftIO3I2CC8readByte4froms5UInt8VAG_tF":{"name":"readByte(from:)","abstract":"<p>Read one byte from a specified slave device with the given address.</p>","parent_name":"I2C"},"Classes/I2C.html#/s:7SwiftIO3I2CC4read5count4fromSays5UInt8VGSi_AHtF":{"name":"read(count:from:)","abstract":"<p>Read an array of data from a specified slave device with the given address.</p>","parent_name":"I2C"},"Classes/I2C.html#/s:7SwiftIO3I2CC5write_2toys5UInt8V_AGtF":{"name":"write(_:to:)","abstract":"<p>Write a byte of data to a specified slave device with the given address.</p>","parent_name":"I2C"},"Classes/I2C.html#/s:7SwiftIO3I2CC5write_2toySays5UInt8VG_AGtF":{"name":"write(_:to:)","abstract":"<p>Write an array of data to a specified slave device with the given address.</p>","parent_name":"I2C"},"Classes/I2C.html#/s:7SwiftIO3I2CC9writeRead_9readCount7addressSays5UInt8VGAI_SiAHtF":{"name":"writeRead(_:readCount:address:)","abstract":"<p>Write an array of bytes to the slave device with the given address and then read the bytes sent from the device.</p>","parent_name":"I2C"},"Classes/I2C/Id.html":{"name":"Id","abstract":"<p>I2C0 and I2C1 are used  for I2C communication. SCL is for clock signal and SDA is for data signal.</p>","parent_name":"I2C"},"Classes/I2C/Speed.html":{"name":"Speed","abstract":"<p>The clock signal is used to synchronize the data transmission between the devices.There are three available speed grades.</p>","parent_name":"I2C"},"Classes/DigitalOut/Mode.html#/s:7SwiftIO10DigitalOutC4ModeO8pushPullyA2EmF":{"name":"pushPull","abstract":"<p>Undocumented</p>","parent_name":"Mode"},"Classes/DigitalOut/Mode.html#/s:7SwiftIO10DigitalOutC4ModeO9openDrainyA2EmF":{"name":"openDrain","abstract":"<p>Undocumented</p>","parent_name":"Mode"},"Classes/DigitalOut/Direction.html#/s:7SwiftIO10DigitalOutC9DirectionO6outputyA2EmF":{"name":"output","abstract":"<p>Undocumented</p>","parent_name":"Direction"},"Classes/DigitalOut/Direction.html#/s:7SwiftIO10DigitalOutC9DirectionO5inputyA2EmF":{"name":"input","abstract":"<p>Undocumented</p>","parent_name":"Direction"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO2D0yA2EmF":{"name":"D0","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO2D1yA2EmF":{"name":"D1","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO2D2yA2EmF":{"name":"D2","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO2D3yA2EmF":{"name":"D3","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO2D4yA2EmF":{"name":"D4","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO2D5yA2EmF":{"name":"D5","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO2D6yA2EmF":{"name":"D6","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO2D7yA2EmF":{"name":"D7","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO2D8yA2EmF":{"name":"D8","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO2D9yA2EmF":{"name":"D9","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO3D10yA2EmF":{"name":"D10","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO3D11yA2EmF":{"name":"D11","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO3D12yA2EmF":{"name":"D12","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO3D13yA2EmF":{"name":"D13","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO3D14yA2EmF":{"name":"D14","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO3D15yA2EmF":{"name":"D15","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO3D16yA2EmF":{"name":"D16","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO3D17yA2EmF":{"name":"D17","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO3D18yA2EmF":{"name":"D18","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO3D19yA2EmF":{"name":"D19","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO3D20yA2EmF":{"name":"D20","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO3D21yA2EmF":{"name":"D21","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO3D22yA2EmF":{"name":"D22","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO3D23yA2EmF":{"name":"D23","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO3D24yA2EmF":{"name":"D24","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO3D25yA2EmF":{"name":"D25","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO3D26yA2EmF":{"name":"D26","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO3D27yA2EmF":{"name":"D27","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO3D28yA2EmF":{"name":"D28","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO3D29yA2EmF":{"name":"D29","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO3D30yA2EmF":{"name":"D30","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO3D31yA2EmF":{"name":"D31","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO3D32yA2EmF":{"name":"D32","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO3D33yA2EmF":{"name":"D33","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO3D34yA2EmF":{"name":"D34","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO3D35yA2EmF":{"name":"D35","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO3D36yA2EmF":{"name":"D36","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO3D37yA2EmF":{"name":"D37","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO3D38yA2EmF":{"name":"D38","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO3D39yA2EmF":{"name":"D39","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO3D40yA2EmF":{"name":"D40","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO3D41yA2EmF":{"name":"D41","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO3D42yA2EmF":{"name":"D42","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO3D43yA2EmF":{"name":"D43","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO3D44yA2EmF":{"name":"D44","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO3D45yA2EmF":{"name":"D45","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO3REDyA2EmF":{"name":"RED","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO5GREENyA2EmF":{"name":"GREEN","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut/Id.html#/s:7SwiftIO10DigitalOutC2IdO4BLUEyA2EmF":{"name":"BLUE","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/DigitalOut.html#/s:7SwiftIO10DigitalOutC_4mode5valueA2C2IdO_AC4ModeOSbtcfc":{"name":"init(_:mode:value:)","abstract":"<p>Initialize a DigitalOut to a specific output pin.</p>","parent_name":"DigitalOut"},"Classes/DigitalOut.html#/s:7SwiftIO10DigitalOutC7getModeAC0F0OyF":{"name":"getMode()","abstract":"<p>Return the current output mode in a format of DigitalOut.Mode enumerate.</p>","parent_name":"DigitalOut"},"Classes/DigitalOut.html#/s:7SwiftIO10DigitalOutC7setModeyyAC0F0OF":{"name":"setMode(_:)","abstract":"<p>Change the output mode.</p>","parent_name":"DigitalOut"},"Classes/DigitalOut.html#/s:7SwiftIO10DigitalOutC5writeyySbF":{"name":"write(_:)","abstract":"<p>Set the output value of the specific pin: true for high voltage and false for low voltage.</p>","parent_name":"DigitalOut"},"Classes/DigitalOut.html#/s:7SwiftIO10DigitalOutC6toggleyyF":{"name":"toggle()","abstract":"<p>Reverse the current output value of the specific pin.</p>","parent_name":"DigitalOut"},"Classes/DigitalOut.html#/s:7SwiftIO10DigitalOutC8getValueSbyF":{"name":"getValue()","abstract":"<p>Get the current output value in Boolean format.</p>","parent_name":"DigitalOut"},"Classes/DigitalOut/Id.html":{"name":"Id","abstract":"<p>The Id enumerate includes available digital pins. They are D0 ~ D45 and RED, GREEN, BLUE (onboard LED lights).</p>","parent_name":"DigitalOut"},"Classes/DigitalOut/Direction.html":{"name":"Direction","abstract":"<p>DO NOT USE**</p>","parent_name":"DigitalOut"},"Classes/DigitalOut/Mode.html":{"name":"Mode","abstract":"<p>The Mode enumerate includes the available output modes. The default output mode in most cases is pushPull. The pushPull mode enables the digital pin to output high and low voltage levels while the open-drain output cannot truly output a high level.</p>","parent_name":"DigitalOut"},"Classes/DigitalIn/InterruptState.html#/s:7SwiftIO9DigitalInC14InterruptStateO7disableyA2EmF":{"name":"disable","abstract":"<p>Undocumented</p>","parent_name":"InterruptState"},"Classes/DigitalIn/InterruptState.html#/s:7SwiftIO9DigitalInC14InterruptStateO6enableyA2EmF":{"name":"enable","abstract":"<p>Undocumented</p>","parent_name":"InterruptState"},"Classes/DigitalIn/InterruptMode.html#/s:7SwiftIO9DigitalInC13InterruptModeO6risingyA2EmF":{"name":"rising","abstract":"<p>Undocumented</p>","parent_name":"InterruptMode"},"Classes/DigitalIn/InterruptMode.html#/s:7SwiftIO9DigitalInC13InterruptModeO7fallingyA2EmF":{"name":"falling","abstract":"<p>Undocumented</p>","parent_name":"InterruptMode"},"Classes/DigitalIn/InterruptMode.html#/s:7SwiftIO9DigitalInC13InterruptModeO8bothEdgeyA2EmF":{"name":"bothEdge","abstract":"<p>Undocumented</p>","parent_name":"InterruptMode"},"Classes/DigitalIn/Mode.html#/s:7SwiftIO9DigitalInC4ModeO8pullDownyA2EmF":{"name":"pullDown","abstract":"<p>Undocumented</p>","parent_name":"Mode"},"Classes/DigitalIn/Mode.html#/s:7SwiftIO9DigitalInC4ModeO6pullUpyA2EmF":{"name":"pullUp","abstract":"<p>Undocumented</p>","parent_name":"Mode"},"Classes/DigitalIn/Mode.html#/s:7SwiftIO9DigitalInC4ModeO8pullNoneyA2EmF":{"name":"pullNone","abstract":"<p>Undocumented</p>","parent_name":"Mode"},"Classes/DigitalIn.html#/s:7SwiftIO9DigitalInC_4modeAcA0C3OutC2IdO_AC4ModeOtcfc":{"name":"init(_:mode:)","abstract":"<p>Initialize a DigitalIn to a specified pin.</p>","parent_name":"DigitalIn"},"Classes/DigitalIn.html#/s:7SwiftIO9DigitalInC7getModeAC0F0OyF":{"name":"getMode()","abstract":"<p>Get the current input mode on a specified pin.</p>","parent_name":"DigitalIn"},"Classes/DigitalIn.html#/s:7SwiftIO9DigitalInC7setModeyyAC0F0OF":{"name":"setMode(_:)","abstract":"<p>Set the input mode for a digital input pin.</p>","parent_name":"DigitalIn"},"Classes/DigitalIn.html#/s:7SwiftIO9DigitalInC4readSbyF":{"name":"read()","abstract":"<p>Read the value from a digital input pin.</p>","parent_name":"DigitalIn"},"Classes/DigitalIn.html#/s:7SwiftIO9DigitalInC12setInterrupt_6enable8callbackyAC0F4ModeO_SbyyctF":{"name":"setInterrupt(_:enable:callback:)","abstract":"<p>Add a callback function to a specified digital pin to set interrupt by detcting the changes of the signal.</p>","parent_name":"DigitalIn"},"Classes/DigitalIn.html#/s:7SwiftIO9DigitalInC15enableInterruptyyF":{"name":"enableInterrupt()","abstract":"<p>Trigger the interrupt after detecting the edge.</p>","parent_name":"DigitalIn"},"Classes/DigitalIn.html#/s:7SwiftIO9DigitalInC16disableInterruptyyF":{"name":"disableInterrupt()","abstract":"<p>Disable the interrupt until the interrupt state is changed.</p>","parent_name":"DigitalIn"},"Classes/DigitalIn.html#/s:7SwiftIO9DigitalInC17getInterruptStateAC0fG0OyF":{"name":"getInterruptState()","abstract":"<p>Check whether the interrupt is enabled.</p>","parent_name":"DigitalIn"},"Classes/DigitalIn.html#/s:7SwiftIO9DigitalInC15removeInterruptyyF":{"name":"removeInterrupt()","abstract":"<p>Remove the interrupt.</p>","parent_name":"DigitalIn"},"Classes/DigitalIn.html#/s:7SwiftIO9DigitalInC2Ida":{"name":"Id","abstract":"<p>The digital input pin numbers are D0 to D45, corresponding to P0 to P45  on the board.</p>","parent_name":"DigitalIn"},"Classes/DigitalIn.html#/s:7SwiftIO9DigitalInC9Directiona":{"name":"Direction","abstract":"<p>Undocumented</p>","parent_name":"DigitalIn"},"Classes/DigitalIn/Mode.html":{"name":"Mode","abstract":"<p>The digital input modes can change the default state (high, low or floating) of a pin by using the pull resistors.</p>","parent_name":"DigitalIn"},"Classes/DigitalIn/InterruptMode.html":{"name":"InterruptMode","abstract":"<p>The interrupt mode determines the edge to raise the interrupt: rising, falling or both edges. A rising edge is the transition of a digital input signal from high to low and a falling edge is from low to high.</p>","parent_name":"DigitalIn"},"Classes/DigitalIn/InterruptState.html":{"name":"InterruptState","abstract":"<p>The interrupt state determines whether the interrupt will be enabled and occur.</p>","parent_name":"DigitalIn"},"Classes/AnalogIn/Id.html#/s:7SwiftIO8AnalogInC2IdO2A0yA2EmF":{"name":"A0","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/AnalogIn/Id.html#/s:7SwiftIO8AnalogInC2IdO2A1yA2EmF":{"name":"A1","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/AnalogIn/Id.html#/s:7SwiftIO8AnalogInC2IdO2A2yA2EmF":{"name":"A2","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/AnalogIn/Id.html#/s:7SwiftIO8AnalogInC2IdO2A3yA2EmF":{"name":"A3","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/AnalogIn/Id.html#/s:7SwiftIO8AnalogInC2IdO2A4yA2EmF":{"name":"A4","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/AnalogIn/Id.html#/s:7SwiftIO8AnalogInC2IdO2A5yA2EmF":{"name":"A5","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/AnalogIn/Id.html#/s:7SwiftIO8AnalogInC2IdO2A6yA2EmF":{"name":"A6","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/AnalogIn/Id.html#/s:7SwiftIO8AnalogInC2IdO2A7yA2EmF":{"name":"A7","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/AnalogIn/Id.html#/s:7SwiftIO8AnalogInC2IdO2A8yA2EmF":{"name":"A8","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/AnalogIn/Id.html#/s:7SwiftIO8AnalogInC2IdO2A9yA2EmF":{"name":"A9","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/AnalogIn/Id.html#/s:7SwiftIO8AnalogInC2IdO3A10yA2EmF":{"name":"A10","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/AnalogIn/Id.html#/s:7SwiftIO8AnalogInC2IdO3A11yA2EmF":{"name":"A11","abstract":"<p>Undocumented</p>","parent_name":"Id"},"Classes/AnalogIn.html#/s:7SwiftIO8AnalogInCyA2C2IdOcfc":{"name":"init(_:)","abstract":"<p>Initialize an AnalogIn to a specified pin.</p>","parent_name":"AnalogIn"},"Classes/AnalogIn.html#/s:7SwiftIO8AnalogInC14getMaxRawValueSiyF":{"name":"getMaxRawValue()","abstract":"<p>Get the maximum raw value of the board. Each ADC has different resolution. The maximum raw value of an 8-bit ADC is 255 and that one of a 10-bit ADC is 4095.</p>","parent_name":"AnalogIn"},"Classes/AnalogIn.html#/s:7SwiftIO8AnalogInC12getReferenceSfyF":{"name":"getReference()","abstract":"<p>Get the reference voltage of the board.</p>","parent_name":"AnalogIn"},"Classes/AnalogIn.html#/s:7SwiftIO8AnalogInC12readRawValueSiyF":{"name":"readRawValue()","abstract":"<p>Read the current raw value from the specified analog pin.</p>","parent_name":"AnalogIn"},"Classes/AnalogIn.html#/s:7SwiftIO8AnalogInC11readPercentSfyF":{"name":"readPercent()","abstract":"<p>Read the input voltage in percentage from a specified analog pin.</p>","parent_name":"AnalogIn"},"Classes/AnalogIn.html#/s:7SwiftIO8AnalogInC11readVoltageSfyF":{"name":"readVoltage()","abstract":"<p>Read the input voltage from a specified analog pin.</p>","parent_name":"AnalogIn"},"Classes/AnalogIn/Id.html":{"name":"Id","abstract":"<p>The analog input pins are A0 to A11, corresponding to P14 to P25 on the left side of your board.</p>","parent_name":"AnalogIn"},"Classes/AnalogIn.html":{"name":"AnalogIn","abstract":"<p>The AnalogIn class is used to read the external voltage applied to an analog input pin.</p>"},"Classes/DigitalIn.html":{"name":"DigitalIn","abstract":"<p>The DigitalIn class is intended to detect the state of a digital input pin. The input value is either true(1) or false(0).</p>"},"Classes/DigitalOut.html":{"name":"DigitalOut","abstract":"<p>The DigitalOut class is used to set a High or Low voltage output to a digital output pin. An initiation is required before using the member functions of this class.</p>"},"Classes/I2C.html":{"name":"I2C","abstract":"<p>I2C (I square C) is a two wire protocol to communicate between different devices. The I2C class allows some operations through I2C protocol, including reading messages from a device and writing messages to a device."},"Classes/PWMOut.html":{"name":"PWMOut","abstract":"<p>The PWMOut class is used to vary the output voltage by controlling the duration of high output in the time period on the pin.</p>"},"Classes/SPI.html":{"name":"SPI","abstract":"<p>SPI is a four wire serial protocol for communication between devices.</p>"},"Classes/Timer.html":{"name":"Timer","abstract":"<p>The Timer class is used to set the occasion to raise the interrupt.</p>"},"Classes/UART.html":{"name":"UART","abstract":"<p>UART is a two-wire serial communication protocol used to communicate with serial devices. The devices must agree on a common transmisson rate before communication.</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Functions.html":{"name":"Functions","abstract":"<p>The following functions are available globally.</p>"}}